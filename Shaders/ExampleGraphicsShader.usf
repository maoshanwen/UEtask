// ExampleGraphicsShader.usf
#include "/Engine/Public/Platform.ush"




// 顶点着色器的输入
struct VertexAttributes
{
    
    float4 v_position : ATTRIBUTE0; // 顶点位置
    float4 v_color : ATTRIBUTE1; // 顶点颜色
    float4 v_normal : ATTRIBUTE2; // 顶点法向量（更新为正确的索引）
    float4 v_time : ATTRIBUTE3; // 时间参数
    float4x4 v_transform : ATTRIBUTE4; // 变换矩阵
    
   
};

// 顶点着色器的输出，同时也是pixel shader的interpolated输入
struct Varyings
{
    float4 p_position : SV_POSITION; // 顶点着色器输出，需要在NDC(Normalized device coordinate)坐标空间下; 片元着色器(pixel shader)的坐标位置输入
    float4 p_color : COLOR0; // 顶点着色器输出; 片元颜色输入
    float4 p_normal : NORMAL0; // 法向量
};

float3x3 GetNormalMatrix(float4x4 modelMatrix)
{
    float3x3 normalMatrix;
    normalMatrix[0] = modelMatrix[0].xyz;
    normalMatrix[1] = modelMatrix[1].xyz;
    normalMatrix[2] = modelMatrix[2].xyz;

    return normalMatrix; // 归一化以防止非正交
}
// 传入的矩阵
// 视图和投影矩阵
float4x4 ViewMatrix;
float4x4 ProjectionMatrix;

void MainVS(in VertexAttributes vertex, out Varyings v)
{   
    float ttime = vertex.v_time.x/2; // 获取时间
    float waveHeight;
    if (fmod(ttime, 2.0) == 0.0) // 偶数 ttime
    {
        waveHeight = -0.5; 
    }
    else // 奇数 ttime
    {
        waveHeight = 0.5; 
    }
    float4 animatedPosition = vertex.v_position; // 获取原始顶点位置
    animatedPosition.y += waveHeight; // 在 y 方向上添加波动
    
    // 应用变换矩阵
    float4 worldPosition = mul(animatedPosition, vertex.v_transform); // 世界空间位置
    float4 viewPosition = mul(worldPosition, ViewMatrix); // 应用视图矩阵
    v.p_position = mul(viewPosition, ProjectionMatrix); // 应用投影矩阵，转换到NDC
    
    
    float4 transformedPosition = mul(animatedPosition, vertex.v_transform);
    v.p_position = transformedPosition; // 将变换后的顶点位置输出
    
    
    
    //v.p_position = vertex.v_position;
    v.p_color = vertex.v_color; // 输出颜色
    
   // 计算法线矩阵
    // 计算法线矩阵
    float3x3 normalMatrix = GetNormalMatrix(vertex.v_transform);
    v.p_normal = float4(normalize(mul(normalMatrix, vertex.v_normal.xyz)), 0.0); // 转换为 float4
}

void MainPS(in Varyings v, out float4 f_color : SV_Target0)
{
     // 定义光源和视点
    float3 lightPosition = float3(0.0, 10.0, 10.0); // 光源位置
    float3 viewPosition = float3(0.0, 0.0, 5.0); // 观察者位置

    // 计算光照
    float3 lightDir = normalize(lightPosition - v.p_position.xyz);
    float3 normal = normalize(v.p_normal.xyz);
    
    // 计算光照强度
    float diffuse = max(dot(normal, lightDir), 0.0);
    
    // 计算最终颜色
    f_color = v.p_color * diffuse; // 乘以颜色和漫反射强度
}